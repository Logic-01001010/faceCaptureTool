# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import tkinter
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *


import cv2, datetime, threading, os


mainloop = True

OnlyFace = False
ShowRectangle = False
FlipHorizontal = False
autoDetectionNcapture = False
path = "./"

# xml 모델 불러오기

cascade_filename = 'haarcascade_frontalface_alt.xml'
cascade = cv2.CascadeClassifier(cascade_filename)



class Thread(QThread):
    changePixmap = pyqtSignal(QImage)
    frame = None
    saveFrame = None

    def run(self):
        global OnlyFace
        global ShowRectangle
        global FlipHorizontal
        global autoDetectionNcapture
        global path

        cap = cv2.VideoCapture(0)
        while mainloop == True:

            ret, self.frame = cap.read()
            self.saveFrame = self.frame

            if FlipHorizontal:
                self.frame = cv2.flip( self.frame, 1 )

            if ShowRectangle:
                
                try:
                    results = cascade.detectMultiScale(self.frame,            # 입력 이미지
                                                    scaleFactor= 1.5,# 이미지 피라미드 스케일 factor
                                                    minNeighbors=5,  # 인접 객체 최소 거리 픽셀
                                                    minSize=(20,20)  # 탐지 객체 최소 크기
                                                    )
                except cv2.error:
                    if not os.path.exists('./haarcascade_frontalface_alt.xml'):
                        print('xml 모델을 찾을 수 없음.')

                        from tkinter import messagebox
                        tkinter.Tk().withdraw()
                        messagebox.showinfo(title='에러', message="xml 모델을 찾을 수 없습니다.\n만약 이 기능을 사용하고 싶을 경우\n(haarcascade_frontalface_alt.xml을 배치해 주십시오.)") 

                    continue

                for box in results:
                    # 좌표 추출       
                    x, y, w, h = box
                    # 경계 상자 그리기
                    cv2.rectangle(self.frame, (x,y), (x+w, y+h), (0,255,0), thickness=2)

            if autoDetectionNcapture:
                self.capture(path)

            if ret:
                # QLable에 맞게 변환
                # https://stackoverflow.com/a/55468544/6622587
                rgbImage = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                h, w, ch = rgbImage.shape
                bytesPerLine = ch * w
                convertToQtFormat = QImage(rgbImage.data, w, h, bytesPerLine, QImage.Format_RGB888)
                p = convertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
                self.changePixmap.emit(p)

    def capture(self, path):
        date = datetime.datetime.now().strftime('%Y-%d-%m %H_%M_%S.%f')
        fname = path + '/' + date + '.jpg'
        print('capture:', fname)

        if OnlyFace:
            temp_frame = None

            try:
                results = cascade.detectMultiScale(self.saveFrame,            # 입력 이미지
                                                scaleFactor= 1.5,# 이미지 피라미드 스케일 factor
                                                minNeighbors=5,  # 인접 객체 최소 거리 픽셀
                                                minSize=(80,80)  # 탐지 객체 최소 크기
                                                )       
            except cv2.error:
                print('xml 모델을 찾을 수 없음.')
                return None

            for box in results:
                x, y, w, h = box
                temp_frame = self.saveFrame[y:y+h, x:x+w]  # 크기 자르기    

            try:
                cv2.imwrite(fname, temp_frame)
            except:
                print('cannot detected face')
        else:
            cv2.imwrite(fname, self.saveFrame)


class Ui_Form(object):

    th = None

    def setImage(self, image):
        self.pictureBox.setPixmap(QPixmap.fromImage(image))
        self.pictureBox.setStyleSheet('QLabel{ }')


    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(682, 574)

        Form.setFixedSize(682, 574)

        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setEnabled(False)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setPlaceholderText("save path(기본값: 현재 실행중인 경로)")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.pictureBox = QtWidgets.QLabel(Form)

        self.pictureBox.setStyleSheet('QLabel{ width: 600; background: gray;}')

        self.pictureBox.setText("")
        self.pictureBox.setObjectName("pictureBox")
        self.gridLayout.addWidget(self.pictureBox, 1, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 2)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.label = QtWidgets.QLabel(Form)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.checkBox = QtWidgets.QCheckBox(Form)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_2.addWidget(self.checkBox)
        self.checkBox_2 = QtWidgets.QCheckBox(Form)
        self.checkBox_2.setObjectName("checkBox_2")
        self.horizontalLayout_2.addWidget(self.checkBox_2)
        self.checkBox_3 = QtWidgets.QCheckBox(Form)
        self.checkBox_3.setObjectName("checkBox_3")
        self.horizontalLayout_2.addWidget(self.checkBox_3)        
        self.checkBox_4 = QtWidgets.QCheckBox(Form)
        self.checkBox_4.setObjectName("checkBox_4")
        self.horizontalLayout_2.addWidget(self.checkBox_4)               
        self.formLayout.setLayout(1, QtWidgets.QFormLayout.LabelRole, self.horizontalLayout_2)
        self.gridLayout_2.addLayout(self.formLayout, 1, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setEnabled(True)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)

        self.retranslateUi(Form)
        self.pushButton_2.clicked.connect(self.selectDirectoryPath) # type: ignore
        self.pushButton.clicked.connect(self.capture) # type: ignore
        self.checkBox.clicked.connect(self.checkBox_onlyFace) # type: ignore
        self.checkBox_2.clicked.connect(self.checkBox_showRectangle) # type: ignore
        self.checkBox_3.clicked.connect(self.flipHorizontal) # type: ignore
        self.checkBox_4.clicked.connect(self.autoDetectionNcapture) # type: ignore


        QtCore.QMetaObject.connectSlotsByName(Form)

        self.th = Thread(Form)
        self.th.changePixmap.connect(self.setImage)
        self.th.start()        

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "FaceCapture"))
        self.pushButton_2.setText(_translate("Form", ".."))
        self.label.setText(_translate("Form", "options"))
        self.checkBox.setText(_translate("Form", "Only Face Capture")) 
        self.checkBox_2.setText(_translate("Form", "Show Rectangle"))
        self.checkBox_3.setText(_translate("Form", "Flip horizontal"))
        self.checkBox_4.setText(_translate("Form", "Auto capture"))
        self.pushButton.setText(_translate("Form", "Capture(F12)"))
        self.pushButton.setShortcut(_translate("Form", "F12"))

    def selectDirectoryPath_thread(self):
        global path
        path = QFileDialog.getExistingDirectory()
        print(path)
        self.lineEdit.setText(path)

    def selectDirectoryPath(self):
        t = threading.Thread(target=self.selectDirectoryPath_thread)
        
        t.start()


    def capture(self):
        global path
        self.th.capture(path)

    
    def checkBox_onlyFace(self):
        global OnlyFace

        if self.checkBox.isChecked():
            OnlyFace = True
        else:
            OnlyFace = False

        None

    def checkBox_showRectangle(self):
        global ShowRectangle

        if self.checkBox_2.isChecked():
            ShowRectangle = True
        else:
            ShowRectangle = False        
                

    def flipHorizontal(self):
        global FlipHorizontal

        if self.checkBox_3.isChecked():
            FlipHorizontal = True
        else:
            FlipHorizontal = False   

    def autoDetectionNcapture(self):
        global autoDetectionNcapture

        if self.checkBox_4.isChecked():
            autoDetectionNcapture = True
        else:
            autoDetectionNcapture = False   

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
